C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PRINTER_NANO
OBJECT MODULE PLACED IN .\Objects\printer_nano.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE printer_nano.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\printer_nano.lst) TABS(2) OBJECT(.\Objects\printer_nano.obj)

line level    source

   1          #include <printer_nano.h>
   2          #include <reg51.h>
   3          #include <string.h>
   4          /*comandos de impresora*/
   5          #define NUL 0x00
   6          #define ETX 0x03
   7          #define EOT 0x04
   8          #define ENQ 0x05
   9          #define ACK 0x06
  10          #define BEL 0X07
  11          #define CR  0x0d
  12          #define LF  0x0a
  13          #define DLE 0x10
  14          #define ESC 0x1B
  15          #define GS  0x1D
  16          #define SP  0x20
  17          #define DC2 0x12
  18          #define FF  0xff
  19          #define CODE39  0X04
  20          #define CODE128 0X73
  21          
  22          /*direcciones de memoria de los datos de la factura*/
  23          
  24          #define EE_CLIENTE            0X0010
  25          #define EE_NIT                0x0040
  26          #define EE_PARQUEADERO        0X0050
  27          #define EE_ADDRES             0x0080
  28          #define EE_MSJ1               0X00B0
  29          #define EE_MSJ2               0X00f1
  30          #define EE_MSJ3               0X0132
  31          #define EE_MSJ4               0X0173
  32          #define EE_MSJ5               0X01b4
  33          #define EE_MSJ6               0X01f5
  34          #define EE_MSJ7               0X0236
  35          /*----------------------------------------------------------------------------
  36          Definiciones de sequencias de impresion de ticket
  37          ------------------------------------------------------------------------------*/
  38          
  39          #define SEQ_INICIO            0X00  
  40          #define SEQ_QUEST_PRINT       0X01
  41          #define SEQ_RTA_QUEST         0x02
  42          #define SEQ_PRINT             0x03
  43          #define SEQ_RELEASE           0x04
  44          #define SEQ_PAPEL             0x05
  45          /*----------------------------------------------------------------------------
  46          msj de lcd tarjeta y lcd serie
  47          ------------------------------------------------------------------------------*/
  48          
  49          #define ERROR_LOOP              0XE0
  50          
  51          //#define SEQ_CHECK_STATUS      0X02
  52          /*----------------------------------------------------------------------------
  53          tiempo de delay entre funciones
  54          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 2   

  55          
  56          #define   TIME_CARD         20    //50
  57          #define   TIME_RX           70    //
  58          #define   TIME_PLACA        55
  59          #define   TIME_PULSADOR     5
  60          
  61          /*----------------------------------------------------------------------------
  62          definicion de recepcion serial 
  63          ------------------------------------------------------------------------------*/
  64          
  65          #define  ESPERA_RX          0           //espera el primer cmd de recepcion del verificado 
  66          
  67          
  68          /*---------------------------------------------------------------------------------
  69          definiciones de la pantalla
  70          -----------------------------------------------------------------------------------*/
  71          #define INGRESO                 0xFA
  72          #define BIENVENIDO              0XFE
  73          #define AUDIO_IN                0XA0
  74          #define AUDIO_ENTER             0XA1
  75          /*variables externas*/
  76          
  77          extern unsigned char g_cEstadoComSoft;
  78          extern unsigned char g_cEstadoImpresion;
  79          extern unsigned char ValTimeOutCom;
  80          extern unsigned char buffer_ready;
  81          extern unsigned char Timer_wait;
  82          extern idata unsigned char  Buffer_Rta_Lintech[];
  83          extern idata unsigned char tbuf [];
  84          extern idata unsigned char rbuf [];
  85          extern  unsigned char placa[];
  86          extern  unsigned char Tipo_Vehiculo;  
  87          extern  unsigned char QR_BARRAS;
  88          
  89          /*funciones prototipo*/
  90          
  91          extern char putchar (char);
  92          
  93          extern void LeerMemoria(unsigned int addres,unsigned char *res);
  94          extern int printf   (const char *, ...);
  95          extern void Block_read_clock_ascii(unsigned char *datos_clock);
  96          extern void Debug_txt_Tibbo(unsigned char * str);
  97          extern unsigned char  ValidaSensoresPaso(void);
  98          extern void sel_Pulsa(void);
  99          extern void send_portERR(unsigned char cod_err);
 100          extern void PantallaLCD(unsigned char cod_msg);
 101          extern void sel_Sensor2(void);
 102          extern void Cmd_Monitor(unsigned char cmd);
 103          extern void incremente_serie();
 104          extern void Trama_pto_paralelo_printer(unsigned char cmd);
 105          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
 106          extern void clear_buffer();
 107          extern void serie_ascii_siceros_l(unsigned char *serie);
 108          extern void clear_placa();
 109          
 110          /*pines del micro*/
 111          
 112          sbit DataIn = P1^1;   
 113          sbit lock = P1^7;           //Relevo  
 114          /*externo bit*/
 115          extern bit placa_ready;
 116          //extern bit buffer_ready;
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 3   

 117          /*------------------------------------------------
 118          Cmd de inicio de impresora
 119          ------------------------------------------------*/
 120          void Inicializa_Print(void)
 121          {
 122   1        putchar(ESC);
 123   1        putchar('@');
 124   1      }
 125          /*-----------------------------------------------
 126          establece posisicon de tabulacion horizontal
 127          n=1 - 255 // establece el conjunto de fuentes determinado 0x35
 128          k= 0 - 32 //indica el numero de posisicon de tabulacion
 129          ------------------------------------------------*/
 130          void Posicion_tabulacion(unsigned char n, unsigned char k)
 131          {
 132   1        putchar(ESC);
 133   1        putchar('D');
 134   1        putchar(n);
 135   1        putchar(k);
 136   1      }
 137          /*-----------------------------------------------
 138          
 139          ------------------------------------------------*/
 140          void Move_car()
 141          {
 142   1        putchar(GS);
 143   1        putchar('P');
 144   1        putchar(0xB4);
 145   1        putchar(0XB4);
 146   1      }
 147          /*------------------------------------------------
 148          Cmd de justificado del texto
 149          ------------------------------------------------*/
 150          void Justify(unsigned char dato_print)
 151          {
 152   1        switch (dato_print)
 153   1        {
 154   2      
 155   2            case 'L':
 156   2              JustificaIzq();
 157   2            break;
 158   2            case 'C':
 159   2              Centrado();
 160   2            break;
 161   2            case 'R':
 162   2              JustificaDrc();
 163   2            break;
 164   2          
 165   2            default:
 166   2            
 167   2            break;
 168   2          }
 169   1        
 170   1      }
 171          /*-----------------------------------------------------------------------------------------------
 172          posicion del texto
 173          (C)= 0 centrado
 174          (l)= 1 justificado a la izquierda
 175          (2)= 2  Justificado a la derecha
 176          -------------------------------------------------------------------------------------------------*/ 
 177          
 178          void JustificaIzq(void)
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 4   

 179          {
 180   1        putchar(ESC);
 181   1        putchar('a'); 
 182   1        putchar('0');
 183   1      }
 184          
 185          void Centrado(void)
 186          {
 187   1        putchar(ESC);
 188   1        putchar('a'); 
 189   1        putchar('1');
 190   1      }
 191          
 192          void JustificaDrc(void)
 193          {
 194   1        putchar(ESC);
 195   1        putchar('a'); 
 196   1        putchar('2');
 197   1      }
 198          /*------------------------------------------------
 199          Cmd del tipo de fuente o letra
 200          '0'
 201          '1' TIPO DE LETRA PEQUEÑO
 202          '2'
 203          '3'
 204          '4'
 205          ------------------------------------------------*/
 206          void Tipo_fuente(unsigned char fuente)
 207          {
 208   1        putchar(ESC);
 209   1        putchar('M'); 
 210   1        putchar(fuente);
 211   1      } 
 212          
 213          /*------------------------------------------------
 214          Cmd que separa un renglon del otro N lineas 
 215          ------------------------------------------------*/
 216          void Interlineado(unsigned char n)
 217          {
 218   1        putchar(ESC);
 219   1        putchar('3');
 220   1        putchar(n); 
 221   1      }
 222          /*------------------------------------------------
 223          Cmd que pone negrilla
 224          00= normal
 225          01=negrilla
 226          ------------------------------------------------*/
 227          void Bold(unsigned char negrilla)
 228          {
 229   1        putchar(ESC);
 230   1        putchar('E'); 
 231   1        putchar(negrilla);
 232   1      }
 233          /*------------------------------------------------
 234          Cmd tamaño del caracter  impresora
 235          00 tamaño normal
 236          Altura
 237          0x1 boble altura,0x02 = x3, 0x3 =x4, 0x4 =x5, 0x05=x6, 0x6=x7 0x7 =x8
 238          Ancho
 239          00 normal
 240          0x10  =x2 -------------0x70=x8
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 5   

 241          
 242          como se debe aramr el cmd 00 normal, 11 boble de ancho y altura
 243          ------------------------------------------------*/
 244          
 245          void Tama_letra(unsigned char tama)
 246          {
 247   1        putchar(GS);
 248   1        putchar('!');
 249   1        putchar(tama);
 250   1      }
 251          
 252          /*------------------------------------------------
 253          Cmd que corre  el papel N lineas 
 254          ------------------------------------------------*/
 255          
 256          void Alimenta_nline(unsigned char nline)
 257          {
 258   1        putchar(ESC);
 259   1        putchar('d');
 260   1        putchar(nline);
 261   1      }
 262          /*------------------------------------------------
 263          Cmd que alimenta el  papel N lineas y lo posiciona para escribir 
 264          ------------------------------------------------*/
 265          void Alimentar_paper(unsigned char nline)
 266          {
 267   1        putchar(ESC);
 268   1        putchar('J');
 269   1        putchar(nline);
 270   1      }
 271          /*------------------------------------------------
 272          Cmd de ESPACIOS ENTRE CARACTERES 
 273          0= normal
 274          1= separacion de espacios entre caracter
 275          ------------------------------------------------*/
 276          
 277          void Espcs_ent_chr(unsigned char espacios)
 278          {
 279   1        putchar(ESC);
 280   1        putchar(SP);
 281   1        putchar(espacios);
 282   1      }
 283          /*------------------------------------------------
 284          Cmd que configura el tamaño del codigo de barras
 285          el defaul es 162
 286          ------------------------------------------------*/
 287          void height_code_bar(unsigned char height)
 288          {
 289   1        putchar(GS);
 290   1        putchar('h');
 291   1        putchar(height);
 292   1      }
 293          
 294          /*------------------------------------------------
 295          Cmd que imprime el codigo  de barras 
 296          '0' no lleva 
 297          '1' arriba
 298          '2' abajo
 299          '3' arriba y abajo
 300          ------------------------------------------------*/
 301          void position_Hri(unsigned char position)
 302          {
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 6   

 303   1        putchar(GS);
 304   1        putchar('H');
 305   1        putchar(position);
 306   1      }
 307          /*------------------------------------------------
 308          Cmd que busca la fuente de la letra
 309          '0' font A (12 - 24)
 310          '1' font B (9 -17)
 311          ------------------------------------------------*/
 312          void Fount_char_hri()
 313          {
 314   1        putchar(GS);
 315   1        putchar('f');
 316   1        putchar('0');
 317   1      }
 318          /*--------------------------------------------------
 319          
 320          ----------------------------------------------------*/
 321          void Prin_cod_barra(unsigned char tipo,unsigned char *bar)
 322          {
 323   1        unsigned char i;
 324   1          putchar(GS);
 325   1          putchar('k');
 326   1          putchar(tipo);
 327   1          for (i=0; bar[i] != '\0'; i++)
 328   1          {
 329   2              putchar(bar[i]);
 330   2          }
 331   1        
 332   1          putchar(NUL);
 333   1      }
 334          /*------------------------------------------------------
 335          funciones del codigo QR
 336          --------------------------------------------------------*/
 337          void Funcion_165()
 338          {
 339   1        /*seleccion modelo QR (modelo seleccionado 2)(0x32=50)*/
 340   1        putchar(GS);
 341   1        putchar('(');
 342   1        putchar('k');
 343   1        putchar(EOT);
 344   1        putchar(NUL);
 345   1        putchar(0x31);
 346   1        putchar(0x41);
 347   1        putchar(0x32);
 348   1        putchar(NUL);
 349   1        
 350   1      }
 351          
 352          void Funcion_169()
 353          {
 354   1      /*seleccione el nivel  de correcciones de errores el codigo QR*/  
 355   1        putchar(GS);
 356   1        putchar('(');
 357   1        putchar('k');
 358   1        putchar(ETX);
 359   1        putchar(NUL);
 360   1        putchar(0x31);
 361   1        putchar(0x45);
 362   1        putchar(0x31);
 363   1        
 364   1      }
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 7   

 365          
 366          void Funcion_167()
 367          {
 368   1        /*se establece el tamaño del codigo QR*/
 369   1        putchar(GS);
 370   1        putchar('(');
 371   1        putchar('k');
 372   1        putchar(ETX);
 373   1        putchar(NUL);
 374   1        putchar(0x31);
 375   1        putchar(0x43);
 376   1        putchar(BEL);
 377   1        
 378   1      }
 379          void Funcion_180(unsigned char *datos)
 380          {
 381   1        /*almacena el codigo qr*/
 382   1        unsigned char pl,i;
 383   1        putchar(GS);
 384   1        putchar('(');
 385   1        putchar('k');
 386   1        pl=strlen(datos);
 387   1        putchar(pl+3);
 388   1        putchar(NUL);
 389   1        putchar(0x31);
 390   1        putchar(0x50);
 391   1        putchar(0x30);
 392   1        for (i=0; i < pl; i++)
 393   1          {
 394   2              putchar(datos[i]);
 395   2          } 
 396   1      }
 397          void Funcion_181()
 398          {
 399   1        /*imprime el codigo QR*/
 400   1        putchar(GS);
 401   1        putchar('(');
 402   1        putchar('k');
 403   1        putchar(ETX);
 404   1        putchar(NUL);
 405   1        putchar(0x31);
 406   1        putchar(0x51);
 407   1        putchar(0x30);
 408   1      }
 409          /*------------------------------------------------
 410          Cmd que corta   el papel  
 411          ------------------------------------------------*/
 412          void FullCut(void)
 413          {
 414   1        putchar(ESC);
 415   1        putchar('i'); 
 416   1      }
 417          /*------------------------------------------------
 418          Cmd que pregunta si hay papel
 419          02= off line
 420          04= estado del papel si hay o no
 421          05= recoger papel
 422          
 423          ------------------------------------------------*/
 424          void Status(unsigned char StatusConsulta)
 425          {
 426   1        
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 8   

 427   1        putchar(DLE);             /*16 decimal*/
 428   1        putchar(EOT);             /*04 decimal*/
 429   1        putchar(StatusConsulta);  /*04 la consulta */
 430   1      }
 431          /*--------------------------------------------------------------------------------------------------------
             --
 432          se imprime el codigo QR
 433          ----------------------------------------------------------------------------------------------------------
             -*/
 434          void Print_cod_QR()
 435          {
 436   1        unsigned char datos[80];
 437   1        unsigned char bar[15];
 438   1        
 439   1        Funcion_165();                              /*selecciona el modelo del QR*/
 440   1        Funcion_169();                              /*selecciona el nivel de correccion de errores*/
 441   1        
 442   1        Funcion_167();                              /*establece el tamaño del QR*/
 443   1      
 444   1      /*---------------------Se imprime el numero del ticket------------------------------------------------- */
 445   1        strcpy(datos, "Tiquete No: ");                /*datos del qr Tiquete No:*/
 446   1        serie_ascii_siceros_l(bar);                 /*numero del tiquete*/
 447   1        strcat(datos,bar);                          /*une los dos strim*/
 448   1        strcat(datos,">");                          /*caracter de separacion de trama*/
 449   1      /*---------------------Se imprime la fecha de entrada del vehiculo------------------------------------- */
             -  
 450   1        strcat(datos," Fecha: 20");
 451   1        Block_read_clock_ascii(bar);                              /*Lee la fecha en ascci*/   
 452   1        strncat(datos,bar,2);                                     /*Año*/
 453   1        strcat(datos,"-");
 454   1        strncat(datos,bar+2,2);                                   /*mes*/
 455   1        strcat(datos,"-");                                        
 456   1        strncat(datos,bar+4,2);                                   /*dia*/
 457   1        strcat(datos," ");                                        
 458   1        strncat(datos,bar+6,2);                                   /*Hora*/
 459   1        strcat(datos,":");                                        
 460   1        strncat(datos,bar+8,2);                                   /*minutos*/
 461   1        strcat(datos,">");                          /*caracter de separacion de trama*/
 462   1      /*---------------------Se imprime el tipo de vehiculo ----------------------------------------------------
             ----  */  
 463   1        if(Tipo_Vehiculo==0)
 464   1        {
 465   2          strcat(datos," Vehiculo: Carro");
 466   2        }
 467   1        else
 468   1        {
 469   2          strcat(datos," Vehiculo: Moto");
 470   2        } 
 471   1        strcat(datos,">");                          /*caracter de separacion de trama*/ 
 472   1      /*---------------------Se imprime el numero de placa del vehiculo-----------------------------------------
             -------  */
 473   1        strcat(datos,"Placa: ");
 474   1        strcat(datos,placa);
 475   1        
 476   1        strcat(datos,"><\n"); 
 477   1        Funcion_180(datos);                         /*almacena el codigo QR*/ 
 478   1        Funcion_181();                              /*imprime el codigo Qr*/
 479   1      }
 480          /*--------------------------------------------------------------------------------------------------------
             ------
 481          Imprime el ticket en codigo QR
 482          ----------------------------------------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 9   

             ------*/
 483          void Print_datos_cliente_QR()
 484          {
 485   1        unsigned char buffer[50];
 486   1        /*------------------------------------------------imprime el nombre del parqueadero*/ 
 487   1          Inicializa_Print();                         /*cmd de inicio de impresora*/
 488   1          Posicion_tabulacion(0x35,0);                /*posiciona el carro*/
 489   1          Move_car();                                 /*establece las unidades de movimiento H y V*/
 490   1          Justify('C');                               /*texto justificado al centro*/
 491   1          Bold(01);                                   /*pone el texto en negrilla*/
 492   1          Tama_letra(0x01);                           /*tamaño del caracter*/           
 493   1          Espcs_ent_chr(01);                          /*espacio entre caracteres*/
 494   1          Alimentar_paper(06);                        /*alimenta el papel y se posiciona para imprimir*/
 495   1          LeerMemoria(EE_CLIENTE,buffer); 
 496   1          printf("%s",buffer);                        /*imprimo el nombre de la  concepcion*/
 497   1      /*------------------------------------------------*/  
 498   1          LeerMemoria(EE_NIT,buffer); 
 499   1          Bold(00);                                   /*pone el texto sin negrilla*/
 500   1          Tama_letra(0x00);                           /*tamaño del caracter*/
 501   1          Espcs_ent_chr(0);                           /*espacio entre caracteres*/
 502   1          printf("NIT: %s",buffer);                   /*imprimo numero de nit*/
 503   1      /*------------------------------------------------*/      
 504   1          Justify('C');                               /*texto justificado al centro*/
 505   1          LeerMemoria(EE_PARQUEADERO,buffer); 
 506   1          printf("%s",buffer);                        /*imprimo el nombre del parqueadero*/
 507   1      /*------------------------------------------------*/  
 508   1          Justify('C');                               /*texto justificado al centro*/
 509   1          LeerMemoria(EE_ADDRES ,buffer); 
 510   1          printf("%s",buffer);                        /*imprimo la direcccion y telefono del parqueadero*/
 511   1          Interlineado(10); 
 512   1      /*------------------se crea el codigo QR-----------------------------------------------------------*/   
 513   1          Justify('C');                               /*texto justificado al centro*/
 514   1          Print_cod_QR();   
 515   1      /*--------------------------------------------------------------------------------------------------*/
 516   1          
 517   1          print_ticket();                             /*Imprimo No de ticket, fecha, tipo de vehiculo, placa*/
 518   1          Print_msj_cod_barras();                     /*imprime los msj informativos del ticket*/
 519   1          printf("\n\n\n\n\n\n"); 
 520   1          FullCut();
 521   1      }
 522          /*------------------------------------------------
 523          Cmd que imprime el ticket del codigo de barras
 524          ------------------------------------------------*/
 525          void Print_datos_cliente()
 526          {
 527   1        unsigned char buffer[50];
 528   1        
 529   1      /*------------------------------------------------    codigo de barras al inicio*/
 530   1          Interlineado(2);  
 531   1          Alimenta_nline(1);
 532   1          Print_cod_barras();                           /*Imprimo el codigo de barras con el numero del recibo */
 533   1      /*------------------------------------------------imprime el nombre del parqueadero*/ 
 534   1          Inicializa_Print();                         /*cmd de inicio de impresora*/
 535   1          Posicion_tabulacion(0x35,0);                /*posiciona el carro*/
 536   1          Move_car();                                 /*establece las unidades de movimiento H y V*/
 537   1          Justify('C');                               /*texto justificado al centro*/
 538   1          Bold(01);                                   /*pone el texto en negrilla*/
 539   1          Tama_letra(0x01);                           /*tamaño del caracter*/           
 540   1          Espcs_ent_chr(01);                          /*espacio entre caracteres*/
 541   1          Alimentar_paper(06);                        /*alimenta el papel y se posiciona para imprimir*/
 542   1          LeerMemoria(EE_CLIENTE,buffer); 
 543   1          printf("%s",buffer);                        /*imprimo el nombre de la  concepcion*/
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 10  

 544   1      /*------------------------------------------------*/  
 545   1          LeerMemoria(EE_NIT,buffer); 
 546   1          Bold(00);                                   /*pone el texto sin negrilla*/
 547   1          Tama_letra(0x00);                           /*tamaño del caracter*/
 548   1          Espcs_ent_chr(0);                           /*espacio entre caracteres*/
 549   1          printf("NIT: %s",buffer);                   /*imprimo numero de nit*/
 550   1      /*------------------------------------------------*/      
 551   1          Justify('C');                               /*texto justificado al centro*/
 552   1          LeerMemoria(EE_PARQUEADERO,buffer); 
 553   1          printf("%s",buffer);                        /*imprimo el nombre del parqueadero*/
 554   1      /*------------------------------------------------*/  
 555   1          Justify('C');                               /*texto justificado al centro*/
 556   1          LeerMemoria(EE_ADDRES ,buffer); 
 557   1          printf("%s",buffer);                        /*imprimo la direcccion y telefono del parqueadero*/
 558   1          Interlineado(10);   
 559   1          print_ticket();                             /*Imprimo No de ticket, fecha, tipo de vehiculo, placa*/
 560   1          Print_msj_cod_barras();                     /*imprime los msj informativos del ticket*/
 561   1          Print_cod_barras();                           /*Imprimo el codigo de barras con el numero del recibo */
 562   1          printf("\n\n\n\n"); 
 563   1          FullCut();
 564   1      }
 565          /*  ------------------------------------------------------------------------
 566          Con el numero de serie imprime el codigo de barras
 567          ----------------------------------------------------------------------------*/
 568          void Print_cod_barras()
 569          {
 570   1        unsigned char temp;
 571   1        unsigned char serie[10];
 572   1        Inicializa_Print();                         /*cmd de inicio de impresora*/
 573   1        Justify('C');                               /*texto justificado al centro*/
 574   1        height_code_bar(0x65);                        /*altura del codigo de barras*/
 575   1        position_Hri('1');                            /*posicion donde imprime el codigo de barras legible es abajo*/
 576   1        Fount_char_hri();                             /*Tipo de fuente*/
 577   1        Tipo_fuente('1');   
 578   1        serie_ascii_siceros_l(serie);
 579   1        temp=strlen(serie); 
 580   1        serie[temp]='$';  
 581   1        serie[temp+1]=0;  
 582   1        Prin_cod_barra(CODE39,serie);
 583   1      
 584   1      }
 585          /*-------------------------------------------------------------------------------
 586          Imprime msj informativos del ticket
 587          --------------------------------------------------------------------------------*/
 588          void Print_msj_cod_barras()
 589          {
 590   1        unsigned char msj_print[62];
 591   1        Tipo_fuente('1');                             /*tipo de fuente 1 letra pequeña*/
 592   1        Interlineado(10);                             /*Separacion entre renglon*/
 593   1        Justify('L');                                 /*justificado a la izquierda*/
 594   1        Bold(0);                                      /*sin negrita*/
 595   1        LeerMemoria(EE_MSJ1,msj_print);
 596   1        printf(" %s",msj_print);  
 597   1        
 598   1        LeerMemoria(EE_MSJ2,msj_print);
 599   1        printf(" %s",msj_print);  
 600   1        
 601   1        LeerMemoria(EE_MSJ3,msj_print);
 602   1        printf(" %s",msj_print);  
 603   1        
 604   1        LeerMemoria(EE_MSJ4,msj_print);
 605   1        printf(" %s",msj_print);  
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 11  

 606   1        
 607   1        LeerMemoria(EE_MSJ5,msj_print);
 608   1        printf(" %s",msj_print);  
 609   1        
 610   1        LeerMemoria(EE_MSJ6,msj_print);
 611   1        printf(" %s",msj_print);  
 612   1        
 613   1        LeerMemoria(EE_MSJ7,msj_print);
 614   1        printf(" %s",msj_print);
 615   1        printf("pyp");  
 616   1      }
 617          /*-------------------------------------------------------------------------------
 618          Imprime No de ticket, fecha, tipo de vehiculo y placa 
 619          --------------------------------------------------------------------------------*/
 620          void print_ticket()
 621          {
 622   1        unsigned char bar[15];
 623   1        Interlineado(10);
 624   1      /*---------------------Se imprime el numero del ticket------------------------------------------------- */
 625   1        
 626   1        Bold(01);                                                 /*pone el texto en negrilla*/
 627   1        Alimenta_nline(1);
 628   1        Justify('L'); 
 629   1        printf("   Tiquete No: ");  
 630   1        Bold(0);
 631   1        serie_ascii_siceros_l(bar);                               /*se imprime el numero de serie*/
 632   1        printf("%s\n",bar);
 633   1        
 634   1      /*---------------------Se imprime la fecha de entrada del vehiculo------------------------------------- */
             -  
 635   1        Block_read_clock_ascii(bar);                              /*Lee la fecha en ascci*/   
 636   1        Justify('L');
 637   1        Bold(1);
 638   1        printf("   Fecha:      ");                                      
 639   1        Bold(0);
 640   1        printf("20"); 
 641   1        putchar(bar[0]);                                          /*Se imprime el año*/
 642   1        putchar(bar[1]);
 643   1        putchar('-');                                             /*se imprime el mes*/
 644   1        putchar(bar[2]);
 645   1        putchar(bar[3]);
 646   1        putchar('-');                                             /*se imprime el dia*/
 647   1        putchar(bar[4]);
 648   1        putchar(bar[5]);
 649   1        putchar(' ');
 650   1      /*---------------------Se imprime la hora de entrada del vehiculo-----------------------------------------
             ---  */  
 651   1      
 652   1        putchar(bar[6]);                                          /*se imprime la hora*/
 653   1        putchar(bar[7]);
 654   1        putchar(':');                                             
 655   1        putchar(bar[8]);                                          /*se imprime minutos*/
 656   1        putchar(bar[9]);
 657   1      
 658   1        putchar('\n');
 659   1        
 660   1      /*---------------------Se imprime el tipo de vehiculo ----------------------------------------------------
             ----  */  
 661   1        Bold(1);
 662   1        if(Tipo_Vehiculo==0)
 663   1        {
 664   2          printf("   Vehiculo:   Carro\n");
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 12  

 665   2          
 666   2        }
 667   1        else
 668   1        {
 669   2          printf("   Vehiculo:   Moto\n");
 670   2        }
 671   1                                                    /*separacion entre trama*/
 672   1      /*---------------------Se imprime el numero de placa del vehiculo-----------------------------------------
             -------  */
 673   1        Tama_letra(0x01);                           /*tamaño del caracter*/           
 674   1        Espcs_ent_chr(01);                          /*espacio entre caracteres*/
 675   1        Bold(1);
 676   1        
 677   1        printf("   Placa:     ");
 678   1        printf("%s\n",placa); 
 679   1                                                    /*separacion entre trama*/
 680   1        Tama_letra(0x0);                            /*tamaño del caracter*/           
 681   1        Espcs_ent_chr(0);                         /*espacio entre caracteres*/
 682   1        Bold(0);
 683   1      }
 684          
 685          
 686          /*--------------------------------------------------------------------------------------------------------
             ------------------
 687          procedimiento que mira el estado en que se encuentra la impresora
 688          SEQ_INICIO=00 se detecta la presencia vehicular 
 689          SEQ_QUEST_PRINT=1 si fue  presionado el boton 
 690          paso_una_vez=variable que habilita el audio una sola vez el de entrada
 691          timer_paso_sensor2= cuenta un tiempo de espera a que los semsores sean liberados
 692          ----------------------------------------------------------------------------------------------------------
             ------------------*/
 693          
 694          void Genera_ticket(void)
 695          {
 696   1        static unsigned char paso_una_vez=0;
 697   1        static unsigned char timer_paso_sensor2=0;
 698   1        switch (g_cEstadoImpresion)
 699   1        {
 700   2          case SEQ_INICIO:
 701   2          
 702   2            
 703   2          if (ValTimeOutCom==1)                                                                 /*tiempo de espera */
 704   2          {
 705   3            if (ValidaSensoresPaso()!=0)                                                        /*pregunto q alla presencia vehicular*/
 706   3            {
 707   4              Debug_txt_Tibbo((unsigned char *) "Vehiculo en el loop\r\n\r\n");                 /* se encuentra un sensor ac
             -tivo*/
 708   4              
 709   4              if(paso_una_vez==0)
 710   4              {
 711   5              PantallaLCD(BIENVENIDO);
 712   5              send_portERR(AUDIO_IN);                                                           /*habilito el audio de entrada*/
 713   5              paso_una_vez=1;
 714   5              }                           
 715   4              sel_Pulsa();                                                                      /*se pregunta por el pulsador*/
 716   4              
 717   4              if (DataIn==0)                                                                    /*si es precionado */     
 718   4              {
 719   5                  
 720   5               Debug_txt_Tibbo((unsigned char *) "Pulsador Activo\r\n");
 721   5                                                                                                /*envia cmd a monitor de vehiculo de Entrada*/
 722   5               g_cEstadoImpresion=SEQ_QUEST_PRINT;                                              /*vamos al siguiente paso a con validar el 
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 13  

             -cmd*/    
 723   5              }
 724   4              else
 725   4              {
 726   5                Debug_txt_Tibbo((unsigned char *) "Pulsador No Activo\r\n");
 727   5                ValTimeOutCom=TIME_PULSADOR;
 728   5                buffer_ready=0;                                                                   /* buffer del pto serie (0) inicia a esperar la tram
             -a*/
 729   5                g_cEstadoComSoft=ESPERA_RX;   
 730   5                g_cEstadoImpresion=SEQ_INICIO;                                                    /*volvemos a preguntar  */  
 731   5                    
 732   5              }
 733   4              
 734   4            
 735   4            }
 736   3            else
 737   3              {
 738   4              Debug_txt_Tibbo((unsigned char *) "Vehiculo no en el loop\r\n\r\n");              /* no hay vehiculo en el lo
             -op*/
 739   4              paso_una_vez=0;                                               
 740   4              ValTimeOutCom=TIME_PULSADOR;
 741   4              buffer_ready=0;                                                                   /* buffer del pto serie (0) inicia a esperar la trama
             -*/
 742   4              g_cEstadoComSoft=ESPERA_RX;   
 743   4              g_cEstadoImpresion=SEQ_INICIO;                                                    /*volvemos a preguntar  */  
 744   4                    
 745   4              }
 746   3          }
 747   2          break;
 748   2      /*--------------------------------------------------------------------------------------------------------
             ----------------------
 749   2      SEQ_QUEST_PRINT=01 el boton fue presionado, envio cmd a monitor   
 750   2      ----------------------------------------------------------------------------------------------------------
             ----------------------*/
 751   2          case SEQ_QUEST_PRINT:
 752   2              
 753   2            Cmd_Monitor('E');                                                               /*trama monitor*/
 754   2            clear_buffer();                                                                 /*limpio el buffer del pto serie*/
 755   2            //Status(04);                                                                     /*pregunta a  la impresora si tiene papel*/
 756   2            send_portERR(BIENVENIDO);                                                       /*puerto paralalelo*/
 757   2              
 758   2          
 759   2            g_cEstadoImpresion=SEQ_PAPEL;
 760   2            ValTimeOutCom=TIME_PULSADOR;          //TIME_RX ;                                                         /*tiempo de espera de respuest
             -a de la impresora*/ 
 761   2            buffer_ready=0;                                                                 /* buffer del pto serie (0) inicia a esperar la trama*/
 762   2            g_cEstadoComSoft=ESPERA_RX;   
 763   2            break;
 764   2      /*--------------------------------------------------------------------------------------------------------
             ----------------------
 765   2      SEQ_RTA_QUEST=02 se pregunta si hay papel en la impresora
 766   2          el pto serie debe responder
 767   2          00= no hay datas
 768   2          01= si tiene papel la printer
 769   2          02= no, tiene papel         
 770   2      ----------------------------------------------------------------------------------------------------------
             ----------------------*/   
 771   2          case SEQ_PAPEL:
 772   2            if (ValTimeOutCom==1)
 773   2            {
 774   3            Debug_txt_Tibbo((unsigned char *) "SEQ_PAPEL\r\n");
 775   3                      
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 14  

 776   3            Status(04);
 777   3              
 778   3            g_cEstadoImpresion=SEQ_RTA_QUEST;
 779   3            ValTimeOutCom=TIME_PULSADOR;    ///TIME_RX  ;                                                         /*tiempo de espera de respuesta 
             -de la impresora*/ 
 780   3            buffer_ready=0;                                                                 /* buffer del pto serie (0) inicia a esperar la trama*/
 781   3            g_cEstadoComSoft=ESPERA_RX; 
 782   3            }
 783   2          break;
 784   2          case SEQ_RTA_QUEST:
 785   2          
 786   2          if ((ValTimeOutCom==1)||(buffer_ready!=0))
 787   2            {
 788   3              
 789   3              DebugBufferMF(Buffer_Rta_Lintech,1,1);    
 790   3              
 791   3              if (buffer_ready==1)
 792   3              {
 793   4                buffer_ready=0;
 794   4                Debug_txt_Tibbo((unsigned char *) "Impresora con papel \r\n");              /*la respuesta es desconocida*/
 795   4                ValTimeOutCom=TIME_PULSADOR;    //TIME_CARD;        //TIME_PLACA;
 796   4                g_cEstadoImpresion=SEQ_PRINT  ;   
 797   4              }
 798   3              else if (buffer_ready==2)
 799   3              {
 800   4                  
 801   4                 Debug_txt_Tibbo((unsigned char *) "Impresora no tiene papel \r\n");        /*la respuesta es desconocid
             -a*/
 802   4                 ValTimeOutCom=TIME_PULSADOR;
 803   4                 buffer_ready=0;                                                                    /* buffer del pto serie (0) inicia a esperar la tra
             -ma*/
 804   4                 g_cEstadoComSoft=ESPERA_RX;    
 805   4                 g_cEstadoImpresion=SEQ_INICIO;
 806   4                    
 807   4              }
 808   3              
 809   3              else if (buffer_ready==3)
 810   3              {
 811   4                 Debug_txt_Tibbo((unsigned char *) "Nivel bajo de papel \r\n");       /*la respuesta es desconocida*/
 812   4                 ValTimeOutCom=TIME_PULSADOR;   //TIME_CARD;              //TIME_PLACA;
 813   4                 buffer_ready=0;                                                                    /* buffer del pto serie (0) inicia a esperar la tra
             -ma*/
 814   4                 g_cEstadoComSoft=ESPERA_RX;    
 815   4                 g_cEstadoImpresion=SEQ_PRINT;
 816   4                    
 817   4              }
 818   3              else 
 819   3              {
 820   4                  Debug_txt_Tibbo((unsigned char *) "Impresora no responde \r\n");          /*la respuesta es desconocida*
             -/
 821   4                 ValTimeOutCom=TIME_PULSADOR;
 822   4                 buffer_ready=0;                                                                    /* buffer del pto serie (0) inicia a esperar la tra
             -ma*/
 823   4                
 824   4                 g_cEstadoComSoft=ESPERA_RX;    
 825   4                 g_cEstadoImpresion=SEQ_PAPEL;
 826   4                //Status(04); 
 827   4                  
 828   4              }
 829   3            }
 830   2              
 831   2            break;
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 15  

 832   2      /*--------------------------------------------------------------------------------------------------------
             ----------------------
 833   2      SEQ_PRINT =03 se imprime la factura
 834   2      y se envia una trama al pto paralelo para que el principal envie trama a access 
 835   2      ademas incrementa el numero de consecutivo  
 836   2      placa_ready=1 indica que tiene la placa =0 indica que no le ha llegado la placa     
 837   2      ----------------------------------------------------------------------------------------------------------
             ----------------------*/   
 838   2            case SEQ_PRINT:
 839   2              if((ValTimeOutCom==1)|| (placa_ready==1))                                         /*tiempo de espera */
 840   2            {
 841   3              Trama_pto_paralelo_printer('a');                                                  /*se envia trama al pto paralelo para comunic
             -ar access*/
 842   3              
 843   3              send_portERR(AUDIO_ENTER);
 844   3              PantallaLCD(INGRESO);       
 845   3              Debug_txt_Tibbo((unsigned char *) "Imprimiendo \r\n");                            /*la respuesta es desconocida*/
 846   3              if(QR_BARRAS!=0)                                                                  /* se pregunta si imprime codigo de barras o Qr*/
 847   3              {
 848   4              Print_datos_cliente_QR();                                                         /*imprime codigo QR*/ 
 849   4              }
 850   3              else
 851   3              {
 852   4              Print_datos_cliente();                                                            /*imprime los datos del cliente codigo de barras*/
 853   4              }
 854   3              
 855   3              ValTimeOutCom=TIME_PULSADOR;
 856   3              buffer_ready=0;                                                                   /* buffer del pto serie (0) inicia a esperar la trama
             -*/
 857   3              g_cEstadoComSoft=ESPERA_RX;   
 858   3              g_cEstadoImpresion=SEQ_RELEASE;
 859   3              lock=1; 
 860   3              Timer_wait=0;
 861   3              incremente_serie();                                                               /*se habre la barrera*/
 862   3              clear_placa();
 863   3            }
 864   2            break;
 865   2      /*--------------------------------------------------------------------------------------------------------
             ------------------------
 866   2        espero el retorno de los sensores a esta normal 
 867   2      y reinicio el ciclo     
 868   2      ----------------------------------------------------------------------------------------------------------
             ------------------------*/   
 869   2            case SEQ_RELEASE:
 870   2            if (ValTimeOutCom==1)                                                                 /*tiempo de espera */
 871   2            {
 872   3              timer_paso_sensor2++;
 873   3             if (timer_paso_sensor2 <= 18 )
 874   3             {
 875   4              sel_Pulsa();                                                                      /*se pregunta por el pulsador*/
 876   4              if (DataIn==1)                                                                    /*que este desactivado*/
 877   4              {
 878   5                
 879   5                sel_Sensor2();                                                                  /*valido que la barrera este abajo*/
 880   5                if ((DataIn==0)||(timer_paso_sensor2 >= 18 ))  
 881   5                {
 882   6                  timer_paso_sensor2=0;
 883   6                  paso_una_vez=0;
 884   6                  lock=0;                                                                           /*apago el rele de la salida */
 885   6                  ValTimeOutCom=TIME_PULSADOR;
 886   6                  buffer_ready=0;                                                                   /* buffer del pto serie (0) inicia a esperar la tra
             -ma*/
C51 COMPILER V9.59.0.0   PRINTER_NANO                                                      08/09/2021 16:55:20 PAGE 16  

 887   6                  g_cEstadoComSoft=ESPERA_RX;
 888   6                  g_cEstadoImpresion=SEQ_INICIO;
 889   6                }
 890   5                else 
 891   5                {
 892   6                  PantallaLCD(INGRESO); 
 893   6                  lock=0;
 894   6                  ValTimeOutCom=TIME_PULSADOR;
 895   6                  buffer_ready=0;                                                                   /* buffer del pto serie (0) inicia a esperar la tra
             -ma*/
 896   6                  g_cEstadoComSoft=ESPERA_RX;
 897   6                  g_cEstadoImpresion=SEQ_RELEASE;
 898   6                }
 899   5              }
 900   4              else
 901   4              {
 902   5                  
 903   5                ValTimeOutCom=TIME_PULSADOR;
 904   5                buffer_ready=0;                                                                   /* buffer del pto serie (0) inicia a esperar la tram
             -a*/
 905   5                g_cEstadoComSoft=ESPERA_RX;
 906   5                g_cEstadoImpresion=SEQ_RELEASE;
 907   5              }
 908   4             }else
 909   3             {
 910   4              timer_paso_sensor2=0;
 911   4              paso_una_vez=0;
 912   4              lock=0;                                                                           /*apago el rele de la salida */
 913   4              ValTimeOutCom=TIME_PULSADOR;
 914   4              buffer_ready=0;                                                                   /* buffer del pto serie (0) inicia a esperar la trama
             -*/
 915   4              g_cEstadoComSoft=ESPERA_RX;
 916   4              g_cEstadoImpresion=SEQ_INICIO;
 917   4             }
 918   3            }
 919   2          break;
 920   2              
 921   2                
 922   2            default:
 923   2            g_cEstadoImpresion=SEQ_INICIO;
 924   2          break;
 925   2      
 926   2        }
 927   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2981    ----
   CONSTANT SIZE    =    421    ----
   XDATA SIZE       =      2     304
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
