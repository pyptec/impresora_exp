C51 COMPILER V9.59.0.0   ACCESCAN                                                          08/09/2021 16:55:19 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ACCESCAN
OBJECT MODULE PLACED IN .\Objects\Accescan.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Accescan.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\Accescan.lst) TABS(2) OBJECT(.\Objects\Accescan.obj)

line level    source

   1          #include <Accescan.h>
   2          #include <reg51.h>
   3          #include <string.h>
   4          extern void Block_write_clock_ascii(unsigned char *datos_clock);
   5          extern void PantallaLCD(unsigned char cod_msg);
   6          extern void Reloj_Pantalla_Lcd();
   7          extern unsigned char rx_Data(void);
   8          extern void Debug_txt_Tibbo(unsigned char * str);
   9          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  10          extern void Debug_Dividir_texto();
  11          extern void tx_aux(unsigned char caracter);
  12          extern unsigned char Dir_board();
  13          extern void Block_read_clock_ascii(unsigned char *datos_clock);
  14          extern void Two_ByteHex_Decimal(unsigned char *buffer,unsigned char id_h,unsigned char id_l);
  15          extern void ByteHex_Decimal(unsigned char *buffer,unsigned char valorhex);
  16          extern void PantallaLCD(unsigned char cod_msg);
  17          extern void LCD_txt (unsigned char * msg,char enable_char_add );
  18          extern unsigned char  ValidaSensoresPaso(void);
  19          extern void tx_aux(unsigned char caracter);
  20          extern void PantallaLCD_LINEA_2(unsigned char cod_msg, unsigned char *buffer);
  21          extern unsigned char hex_bcd (unsigned char byte);
  22          extern void Trama_pto_Paralelo_P(unsigned char *buffer_S1_B0,unsigned char *buffer_S1_B2,unsigned char cmd
             -);
  23          extern void  send_port(unsigned char *buffer_port, unsigned char length_char);
  24          extern void graba_serie(unsigned char *buffer);
  25          extern void graba_serie_ascii_hex(unsigned char *buffer);
  26          unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  27          extern unsigned long int  Leer_serie ();
  28          extern void serie_ascii_siceros_l(unsigned char *serie);
  29          extern void Cmd_LPR_Salida_wiegand(unsigned char *buffer);
  30          
  31          extern unsigned char Timer_wait;
  32          extern unsigned char Tipo_Vehiculo;
  33          extern unsigned char USE_LPR;
  34          extern unsigned char  Debug_Tibbo;
  35          extern unsigned char xdata Buffer_Tibbo_rx[];
  36          extern unsigned char ValTimeOutCom;   
  37          
  38          sbit rx_ip = P0^0;        
  39          sbit lock = P1^7;           //Relevo 
  40          sbit Atascado = P0^3;       //Rele de on/off del verificador o transporte
  41          sbit led_err_imp = P0^2;      //Error   
  42          
  43          
  44          #define STX                     02 
  45          #define ETX                     03 
  46          #define LOTE_FULL               05
  47          #define FUERA_DE_LINEA          0xb6
  48          #define ON_LINE                 0xAA
  49          
  50          #define PRMR_NO_MENSUAL             0XB1
  51          #define PRMR_NO_IN_PARK             0XB2
  52          #define PRMR_IN_PARK                0XB3
  53          #define PRMR_EXPIRO                 0XB4
C51 COMPILER V9.59.0.0   ACCESCAN                                                          08/09/2021 16:55:19 PAGE 2   

  54          #define PRMR_MENSUAL_FUERA_HORARIO  0XB5
  55          #define PRMR_GRACIAS                'V'
  56          
  57          /*mensajes de pantalla*/
  58          #define BIENVENIDO              0XFE
  59          #define SIN_PAGO                0XE7
  60          #define LECTURA_WIEGAND         92
  61          
  62          #define GRACIAS                 91    
  63          #define NO_MENSUAL_NI_PREPAGO   96
  64          #define NO_IN_PARK              93
  65          #define MENSUAL_FUERA_HORARIO   98
  66          #define IN_PARK                 99
  67          #define EXPIRO                  94
  68          #define BIENVENIDO_WIEGAN       0x9b
  69          
  70          //unsigned char S1_B2[]={0x13, 0x03, 0x1D, 0x0B, 0x0E, 00, 00, 00, 00, 00, 0x01, 0x13, 0x03, 0x1D, 0x0E, 0
             -x1D};
  71          //unsigned char S1_B0[]={0x32, 0x31, 0x30, 0x37, 0x31, 0x35, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01};
  72          //unsigned char S_B[]={0xE7, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01};
  73          /*------------------------------------------------------------------------------
  74          Rutina q valida los cmd del pto paralelo
  75          ------------------------------------------------------------------------------*/
  76          void Valida_Trama_Pto(unsigned char *buffer, unsigned char length_trama)
  77          {
  78   1         unsigned char buff[11];
  79   1        /*-------------------------------CMD H reloj para el board y la pantalla lcd-----------------------------
             --------------*/
  80   1          if((length_trama==25)&&(*buffer==STX)&&(*(buffer+2)=='H')&&*(buffer+(length_trama-1))==ETX)                         
             -/*cmd de Accescan que me envia el reloj actualizado*/
  81   1          { 
  82   2            
  83   2            Block_write_clock_ascii(buffer+3);                                                                                /* se escribe el reloj de har
             -dware*/
  84   2          
  85   2            Reloj_Pantalla_Lcd();                                                                                             /* Escribo el reloj en la pantalla 
             -lcd*/
  86   2          
  87   2          }
  88   1            /*-------------------------------CMD 05 lote full -----------------------------------------------------
             -------------*/
  89   1          else if ((*buffer==LOTE_FULL) )                                                                               /*ok si llega msj a;96;NO ES MENS
             -UALIDAD NI PREPAGO<LF>*/
  90   1          {
  91   2            PantallaLCD(LOTE_FULL);                                                                                           /*MSJ MENSUAL NO EN PARQUEADERO*/
  92   2          }   
  93   1            /*-------------------------------CMD B1 PRMR_NO_MENSUAL_NI PREPAGO ------------------------------------
             ------------------------------*/
  94   1          else if ((*buffer==PRMR_NO_MENSUAL) )                                                                               /*ok si llega msj a;96;NO E
             -S MENSUALIDAD NI PREPAGO<LF>*/
  95   1          {
  96   2            PantallaLCD(NO_MENSUAL_NI_PREPAGO);                                                                                           /*MSJ MENSUAL NO EN PA
             -RQUEADERO*/
  97   2          }   
  98   1            /*-------------------------------CMD B2 PRMR_NO_IN_PARK   ---------------------------------------------
             ---------------------*/
  99   1          else if ((*buffer==PRMR_NO_IN_PARK) )                                                                                 /*ok MSJ MENSUAL NO EN PAR
             -QUEADERO  */
 100   1          {
 101   2            PantallaLCD(NO_IN_PARK);                                                                                            /*MSJ MENSUAL NO EN PARQUEADERO*/
 102   2          } 
 103   1          /*-------------------------------CMD B3 PRMR_IN_PARK   -------------------------------------------------
C51 COMPILER V9.59.0.0   ACCESCAN                                                          08/09/2021 16:55:19 PAGE 3   

             -----------------*/
 104   1          else if ((*buffer==PRMR_IN_PARK)  )                                                                                   /*ok msj MENSUAL ESTA EN PAR
             -QUEADER*/
 105   1          {
 106   2            PantallaLCD(IN_PARK);                                                                                           /*MSJ MENSUAL ESTA EN PARQUEADER*/
 107   2          }     
 108   1          /*-------------------------------CMD B4  EXPIRO mensualidad vencida ------------------------------------
             -----------------------*/
 109   1          else if ((length_trama==1)&&(*buffer==PRMR_EXPIRO))                                                                   /*ok msj mensual ve
             -ncida */
 110   1          {
 111   2               PantallaLCD(EXPIRO);                                                                                             /*mesualidad vencida*/
 112   2          }
 113   1          /*-------------------------------CMD B5  HORARIO mensualidad FUERA DE HORARIO --------------------------
             ---------------------------------*/
 114   1          else if ((length_trama==1)&&(*buffer==PRMR_MENSUAL_FUERA_HORARIO))                                                    /* */
 115   1          {
 116   2               PantallaLCD(MENSUAL_FUERA_HORARIO);                                                                              /*ok msj mesualidad fuera d
             -e horario*/
 117   2          }
 118   1          
 119   1          /*-------------------------------CMD B6 fuera de linea -------------------------------------------------
             -------------*/
 120   1          else if(*buffer==FUERA_DE_LINEA)                                                                                    /*cmd de Accescan que dice q e
             -sta fuera de linea*/
 121   1          {
 122   2            if (Timer_wait>=20)                                                                                               /* se envia el msj fuera de linea*/
 123   2            {                                                                                                                 /* con un tiempo de retardo =((1/(22118400/12
             -)*65535)*30)*/
 124   3              PantallaLCD(FUERA_DE_LINEA);
 125   3              led_err_imp=0;                                                                                                  /*error led on*/
 126   3              Timer_wait=0;
 127   3              lock=0;                                                                                                         /*relevo off despues de 1 minuto*/
 128   3              Atascado=0;
 129   3              ValTimeOutCom=10;       
 130   3            }
 131   2            if ((Debug_Tibbo==0)&&(USE_LPR==1))
 132   2              {
 133   3              Debug_Tibbo=1;
 134   3              Debug_txt_Tibbo((unsigned char *) "LIVE\n");
 135   3            
 136   3              Debug_Tibbo=0;
 137   3              }
 138   2          }
 139   1          /*-------------------------------CMD AA en linea -------------------------------------------------------
             ------------*/
 140   1          else if (*buffer==ON_LINE)                                                                                          /*en linea*/
 141   1          {
 142   2            
 143   2            if (Timer_wait>=20)                                                                                               /* se envia el msj fuera de linea*/
 144   2            { 
 145   3              Timer_wait=0;                                                                                                   /*se inicia el timer*/
 146   3              lock=0;
 147   3              led_err_imp=1;                                                                                                  /*relevo off despues de 1 minuto*/
 148   3              Atascado=0; 
 149   3              ValTimeOutCom=10;
 150   3              if ((Debug_Tibbo==0)&&(USE_LPR==1))
 151   3              {
 152   4              Debug_Tibbo=1;
 153   4              Debug_txt_Tibbo((unsigned char *) "LIVE\n");
 154   4              
 155   4              Debug_Tibbo=0;
C51 COMPILER V9.59.0.0   ACCESCAN                                                          08/09/2021 16:55:19 PAGE 4   

 156   4              }
 157   3            }
 158   2            
 159   2          } 
 160   1          /*-------------------------------CMD 'V'=PRMR_GRACIAS  msj Gracias y nombre del mensual-----------------
             -------------------------*/
 161   1          else if ((length_trama == 0x13)&& (*(buffer+1)==PRMR_GRACIAS)&&*(buffer+(length_trama-1))==ETX)                 
             -        /* */
 162   1          {
 163   2               *(buffer+(length_trama-1))=0;
 164   2               PantallaLCD_LINEA_2(GRACIAS,buffer+2);                                                                     /*SE ENVIA EL MSJ GRACIAS lo
             - q envia el software*/
 165   2          }
 166   1          /*-------------------------------CMD 'O'=PRMR_BIENVENIDO  msj BIENVENIDO  nombre del mensual------------
             ------------------------------*/
 167   1          else if ((length_trama==19)&&(*buffer==STX)&&(*(buffer+1)=='O')&&*(buffer+(length_trama-1))==ETX)             
             -      /*mensaje de bienvenidos*/
 168   1          {
 169   2            *(buffer+(length_trama-1))=0;
 170   2               PantallaLCD_LINEA_2(BIENVENIDO_WIEGAN,buffer+2);       
 171   2          }
 172   1          else if ((length_trama==1)&&(*buffer==0xA1))                                                                        /*cmd 0xA1 audio caja qu
             -e es igual a no registra pago */
 173   1          {
 174   2               PantallaLCD(SIN_PAGO);
 175   2          }
 176   1                    /*-------------------------------CMD de wiegand---------------------------------------------------*
             -/
 177   1          else if ((length_trama==6)&&(*buffer==STX)&&(*(buffer+1)=='W')&&*(buffer+(length_trama-1))==ETX)                
             -    /* cmd q comunica con monitor po wigan*/
 178   1          {
 179   2            /*-------------------------------se covierte el numero serie de la tarjeta-----------------------------
             --*/
 180   2                    ByteHex_Decimal(buff,*(buffer+2));                                                                        /*convierto el primer byte_he
             -x a decimal    */
 181   2                    buff[3]=' ';
 182   2                    Two_ByteHex_Decimal(buff+4,*(buffer+3),*(buffer+4)) ;   
 183   2              if (USE_LPR==1)
 184   2              {
 185   3                                                                        /*convierto un byte de 16 bits a decimal*/                                                  
 186   3                  
 187   3                    PantallaLCD_LINEA_2(LECTURA_WIEGAND,buff);
 188   3                                                                                                                              /*transmito el codigo de la tarjeta a la panta
             -lla lcd*/
 189   3                    /*-------------------------------------------------------------------------------------------------
             --------*/
 190   3                
 191   3                  //  while(!ValidaSensoresPaso());
 192   3                      
 193   3                    Cmd_LPR_Salida_wiegand(buff);
 194   3              }                                                                             
 195   2              
 196   2              else
 197   2              {
 198   3                 /*-------------------------------mensaje en la pantalla---------------------------------------------
             -------*/
 199   3                                                              /*convierto un byte de 16 bits a decimal*/                                                  
 200   3                    PantallaLCD_LINEA_2(LECTURA_WIEGAND,buff);                                                            /*transmito el codigo de la
             - tarjeta a la pantalla lcd*/
 201   3                                                                                                          
 202   3                /*---------------------------------------------------------------------------------------------------
             ------*/  
C51 COMPILER V9.59.0.0   ACCESCAN                                                          08/09/2021 16:55:19 PAGE 5   

 203   3              
 204   3              }
 205   2          }
 206   1          else if ((length_trama==12)&&(*buffer==STX)&&*(buffer+(length_trama-1))==ETX)                                   /*graba e
             -l numero de consecutivo en eeprom*/
 207   1          {
 208   2            graba_serie_ascii_hex(buffer+1);
 209   2            
 210   2            
 211   2              Debug_txt_Tibbo((unsigned char *) "Grabacion Serie: ");                                                     /*trama recibida pto
             - paralelo */
 212   2              DebugBufferMF(buffer,length_trama,1);
 213   2              
 214   2            
 215   2          }
 216   1      }
 217          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    833    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
