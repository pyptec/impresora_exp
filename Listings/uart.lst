C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uart.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /*------------------------------------------------------------------------------
   2          SIO.C:  Serial Communication Routines.
   3          
   4          Copyright 1995-2002 KEIL Software, Inc.
   5          ------------------------------------------------------------------------------*/
   6          
   7          #include <reg51.h>
   8          #include "uart.h"
   9          
  10          
  11          /*variables globales */
  12          extern idata unsigned char tbuf [];
  13          extern idata unsigned char rbuf [];
  14          //extern idata unsigned char Buffer_Tibbo_rx[];
  15          extern unsigned char g_cEstadoComSoft;
  16          extern idata unsigned char  Buffer_Rta_Lintech[];
  17          extern  unsigned char g_cContByteRx;
  18          extern unsigned char ValTimeOutCom;
  19          extern unsigned char cont_trama;
  20          extern unsigned char buffer_ready;
  21          /*funciones prototipo*/
  22          extern int printf   (const char *, ...);
  23          extern char putchar (char c);
  24          /*constantes globales*/
  25          extern const unsigned  char ACK;
  26          extern const unsigned  char ETX;
  27          extern const unsigned  char STX_LINTECH;
  28          
  29          
  30          /*externos bits*/
  31          //extern bit buffer_ready;
  32          /*------------------------------------------------------------------------------
  33          Notes:
  34          
  35          The length of the receive and transmit buffers must be a power of 2.
  36          
  37          Each buffer has a next_in and a next_out index.
  38          
  39          If next_in = next_out, the buffer is empty.
  40          
  41          (next_in - next_out) % buffer_size = the number of characters in the buffer.
  42          ------------------------------------------------------------------------------*/
  43          #define TBUF_SIZE   2           /*** Must be one of these powers of 2 (2,4,8,16,32,64,128) ***/
  44          #define RBUF_SIZE   8          /*** Must be one of these powers of 2 (2,4,8,16,32,64,128) ***/
  45          /*definiciones de los estados de recepcion*/
  46          #define  ESPERA_RX          0           //espera el primer cmd de recepcion del verificado 
  47          #define  ESPERA_INICIO_RTA  1   // se almacena el stx
  48          #define  LEN_DATA           2
  49          #define  STORE_DATA         3
  50          
  51          
  52          
  53          /*tiempo de delay entre funciones*/
  54          #define TIME_CARD       5     //50
C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 2   

  55          #define TIME_EJECT        5     //60
  56          #define RET_MINIMO        3
  57          
  58          #define TBUF_SIZE_LINTECH   10  
  59          //#define XTAL   22118400
  60          //#define TBUF_SPACE  idata       /*** Memory space where the transmit buffer resides ***/
  61          //#define RBUF_SPACE  idata       /*** Memory space where the receive buffer resides ***/
  62          
  63          #define CTRL_SPACE  data        /*** Memory space for the buffer indexes ***/
  64          #define DC2 0x12
  65          #define RS  0x1e
  66          /*------------------------------------------------------------------------------
  67          ------------------------------------------------------------------------------*/
  68          /*
  69          #if TBUF_SIZE < 2
  70          #error TBUF_SIZE is too small.  It must be larger than 1.
  71          #elif TBUF_SIZE > 128
  72          #error TBUF_SIZE is too large.  It must be smaller than 129.
  73          #elif ((TBUF_SIZE & (TBUF_SIZE-1)) != 0)
  74          #error TBUF_SIZE must be a power of 2.
  75          #endif
  76          
  77          #if RBUF_SIZE < 2
  78          #error RBUF_SIZE is too small.  It must be larger than 1.
  79          #elif RBUF_SIZE > 128
  80          #error RBUF_SIZE is too large.  It must be smaller than 129.
  81          #elif ((RBUF_SIZE & (RBUF_SIZE-1)) != 0)
  82          #error RBUF_SIZE must be a power of 2.
  83          #endif
  84          */
  85          /*------------------------------------------------------------------------------
  86          ------------------------------------------------------------------------------*/
  87          //static idata unsigned char tbuf [TBUF_SIZE];
  88          //static idata unsigned char rbuf [RBUF_SIZE];
  89          
  90          static CTRL_SPACE unsigned char t_in = 0;
  91          static CTRL_SPACE unsigned char t_out = 0;
  92          
  93          static CTRL_SPACE unsigned char r_in = 0;
  94          static CTRL_SPACE unsigned char r_out = 0;
  95          
  96          static bit ti_restart = 0;  /* NZ if TI=1 is required */
  97          
  98          
  99          /*------------------------------------------------------------------------------
 100          ------------------------------------------------------------------------------*/
 101          static void com_isr (void) interrupt 4 
 102          {
 103   1      static data unsigned char cDatoRx;
 104   1      //data unsigned char k,bcc;
 105   1      //static data unsigned char num_datos;
 106   1      /*------------------------------------------------
 107   1      Received data interrupt.
 108   1      ------------------------------------------------*/
 109   1      if (RI != 0)
 110   1        {
 111   2          
 112   2        RI = 0;
 113   2        cDatoRx=SBUF;
 114   2        if (((r_in - r_out) & ~(RBUF_SIZE-1)) == 0)
 115   2          {
 116   3          rbuf [r_in & (RBUF_SIZE-1)] = cDatoRx;    //cDatoRx;
C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 3   

 117   3          r_in++;
 118   3            
 119   3          }
 120   2          if(g_cContByteRx>TBUF_SIZE_LINTECH)
 121   2            {
 122   3                  g_cEstadoComSoft=ESPERA_RX;
 123   3            }
 124   2          switch (g_cEstadoComSoft)
 125   2          {
 126   3      /*------------------------------------------------------------------------------------------------
 127   3            espera el ASK de respuesta
 128   3      -------------------------------------------------------------------------------------------------*/     
 129   3            case ESPERA_RX:
 130   3            
 131   3            
 132   3            g_cContByteRx=0;//r_in=0;r_out=0;                   /*con el ask reset de bit de inicio*/
 133   3            g_cEstadoComSoft=ESPERA_INICIO_RTA;
 134   3          
 135   3          
 136   3          break;
 137   3      /*------------------------------------------------------------------------------------------------
 138   3            se almacena la trama 
 139   3      -------------------------------------------------------------------------------------------------*/
 140   3      
 141   3            case ESPERA_INICIO_RTA:
 142   3            { 
 143   4              Buffer_Rta_Lintech[g_cContByteRx]=cDatoRx;
 144   4              if(Buffer_Rta_Lintech[0]==DC2)
 145   4              {           
 146   5                buffer_ready=1;                                 /*trama valida hay papel*/
 147   5                g_cEstadoComSoft=ESPERA_RX;                     /* bcc ok trama valida*/
 148   5              }
 149   4              else if(Buffer_Rta_Lintech[0]=='r')
 150   4              {
 151   5                buffer_ready=2;                                 /*no hay papel*/    
 152   5                g_cEstadoComSoft=ESPERA_RX;
 153   5              }
 154   4              else if (Buffer_Rta_Lintech[0]==RS)
 155   4              {
 156   5                buffer_ready=3;                               /*nivel de papel bajo */  
 157   5                g_cEstadoComSoft=ESPERA_RX;
 158   5              }
 159   4              else
 160   4              {
 161   5                buffer_ready=4;                                 /*caracter desconocido*/    
 162   5                g_cEstadoComSoft=ESPERA_RX;
 163   5              }
 164   4            }
 165   3            break;
 166   3            
 167   3      /*------------------------------------------------------------------------------------------------
 168   3            se toma la longitud de la trama a recibir y se le suman 2 caracteres ETX y BCC
 169   3      -------------------------------------------------------------------------------------------------*/
 170   3      /*    case LEN_DATA:
 171   3            
 172   3          if (g_cContByteRx==3)
 173   3          {
 174   3            
 175   3            num_datos=cDatoRx+2;
 176   3            Buffer_Rta_Lintech[g_cContByteRx++]=cDatoRx;
 177   3            g_cEstadoComSoft=STORE_DATA;      //numero de datos a recibir
 178   3          } 
C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 4   

 179   3          else
 180   3          {     
 181   3            Buffer_Rta_Lintech[g_cContByteRx++]=cDatoRx;
 182   3            g_cEstadoComSoft=LEN_DATA;
 183   3          }
 184   3      
 185   3          break;
 186   3          */
 187   3      /*------------------------------------------------------------------------------------------------
 188   3          se almacena los datos 
 189   3      /*-------------------------------------------------------------------------------------------------*/
 190   3        /*  case STORE_DATA:
 191   3            
 192   3              Buffer_Rta_Lintech[g_cContByteRx++]=cDatoRx;  
 193   3              num_datos--;
 194   3              if (num_datos==0)
 195   3              {
 196   3                if(Buffer_Rta_Lintech[g_cContByteRx-2]==ETX)
 197   3                {
 198   3                  bcc=0;
 199   3                  for (k=0; k<g_cContByteRx-1; k++)
 200   3                  {
 201   3                    bcc=Buffer_Rta_Lintech[k]^bcc;
 202   3                  }
 203   3                    if (bcc==Buffer_Rta_Lintech[g_cContByteRx-1]) 
 204   3                    {
 205   3                      buffer_ready=1;
 206   3          //            g_cEstadoComSoft=ESPERA_RX;                     /* bcc ok trama valida*/
 207   3                                
 208   3        //            }
 209   3          /*          else
 210   3                    {
 211   3            //          g_cEstadoComSoft=ESPERA_RX;                     /* bcc no concuerda  trama no valida*/
 212   3            //        }
 213   3          /*      } 
 214   3                else 
 215   3                //  {
 216   3            //    g_cEstadoComSoft=ESPERA_RX;                         /*  no concuerda  ETX en la trama no valida*/
 217   3              //  } 
 218   3                      
 219   3              //}
 220   3            //  else 
 221   3            //  {
 222   3            //    g_cEstadoComSoft=STORE_DATA;                          /* espera datos*/
 223   3            //  }
 224   3             
 225   3      //    break;    
 226   3      
 227   3      /*------------------------------------------------------------------------------------------------
 228   3          
 229   3      /*-------------------------------------------------------------------------------------------------*/       
 230   3          default:
 231   3            g_cEstadoComSoft=ESPERA_RX;
 232   3          break;
 233   3          }
 234   2       }
 235   1      
 236   1      /*------------------------------------------------
 237   1      Transmitted data interrupt.
 238   1      ------------------------------------------------*/
 239   1      if (TI != 0)
 240   1        {
C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 5   

 241   2        TI = 0;
 242   2      
 243   2        if (t_in != t_out)
 244   2          {
 245   3          SBUF = tbuf [t_out & (TBUF_SIZE-1)];
 246   3          t_out++;
 247   3          ti_restart = 0;
 248   3          }
 249   2        else
 250   2          {
 251   3          ti_restart = 1;
 252   3          }
 253   2        }
 254   1      
 255   1      }
 256          
 257          /*------------------------------------------------------------------------------
 258          ------------------------------------------------------------------------------*/
 259          #pragma disable
 260          
 261          void com_initialize (void)
 262          {
 263   1      /*------------------------------------------------
 264   1      Setup TIMER1 to generate the proper baud rate.
 265   1      ------------------------------------------------*/
 266   1      com_baudrate ();
 267   1      
 268   1      /*------------------------------------------------
 269   1      Clear com buffer indexes.
 270   1      ------------------------------------------------*/
 271   1      t_in = 0;
 272   1      t_out = 0;
 273   1      
 274   1      r_in = 0;
 275   1      r_out = 0;
 276   1      
 277   1      /*------------------------------------------------
 278   1      Setup serial port registers.
 279   1      ------------------------------------------------*/
 280   1      SM0 = 0; SM1 = 1;   /* serial port MODE 1 */
 281   1      SM2 = 0;
 282   1      REN = 1;            /* enable serial receiver */
 283   1      
 284   1      RI = 0;             /* clear receiver interrupt */
 285   1      TI = 0;             /* clear transmit interrupt */
 286   1      ti_restart = 1;
 287   1      
 288   1      ES = 1;             /* enable serial interrupts */
 289   1      PS = 1;             /* set serial interrupts to low priority */
 290   1      }
 291          
 292          /*------------------------------------------------------------------------------
 293          ------------------------------------------------------------------------------*/
 294          #pragma disable
 295          
 296          void com_baudrate ()
 297            
 298          {
 299   1      /*------------------------------------------------
 300   1      Clear transmit interrupt and buffer.
 301   1      ------------------------------------------------*/
 302   1      TI = 0;             /* clear transmit interrupt */
C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 6   

 303   1      t_in = 0;           /* empty transmit buffer */
 304   1      t_out = 0;
 305   1      
 306   1      /*------------------------------------------------
 307   1      Set timer 1 up as a baud rate generator.
 308   1      ------------------------------------------------*/
 309   1      TR1 = 0;            /* stop timer 1 */
 310   1      ET1 = 0;            /* disable timer 1 interrupt */
 311   1      
 312   1      PCON |= 0x80;       /* 0x80=SMOD: set serial baudrate doubler */
 313   1      
 314   1      TMOD &= ~0xF0;      /* clear timer 1 mode bits */
 315   1      TMOD |= 0x20;       /* put timer 1 into MODE 2 */
 316   1      
 317   1      TH1 =0xf4;// (unsigned char) (256 - (XTAL / (16L * 12L * baudrate)));
 318   1      TL1=0xf4;
 319   1      TR1 = 1;            /* start timer 1 */
 320   1      }
 321          
 322          /*------------------------------------------------------------------------------
 323          ------------------------------------------------------------------------------*/
 324          #pragma disable
 325          
 326          char com_putchar (
 327            unsigned char c)
 328          {
 329   1      /*------------------------------------------------
 330   1      If the buffer is full, return an error value.
 331   1      ------------------------------------------------*/
 332   1      if (com_tbuflen () >= TBUF_SIZE)
 333   1        return (-1);
 334   1      
 335   1      /*------------------------------------------------
 336   1      Add the data to the transmit buffer.  If the
 337   1      transmit interrupt is disabled, then enable it.
 338   1      ------------------------------------------------*/
 339   1      tbuf [t_in & (TBUF_SIZE - 1)] = c;
 340   1      t_in++;
 341   1      
 342   1      if (ti_restart)
 343   1        {
 344   2        ti_restart = 0;
 345   2        TI = 1;               /* generate transmit interrupt */
 346   2        }
 347   1      
 348   1      return (0);
 349   1      }
 350          
 351          /*------------------------------------------------------------------------------
 352          ------------------------------------------------------------------------------*/
 353          #pragma disable
 354          
 355          int com_getchar (void)
 356          {
 357   1      if (com_rbuflen () == 0)
 358   1        return (-1);
 359   1      
 360   1      return (rbuf [(r_out++) & (RBUF_SIZE - 1)]);
 361   1      }
 362          
 363          /*------------------------------------------------------------------------------
 364          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 7   

 365          #pragma disable
 366          
 367          unsigned char com_rbuflen (void)
 368          {
 369   1      return (r_in - r_out);
 370   1      }
 371          
 372          /*------------------------------------------------------------------------------
 373          ------------------------------------------------------------------------------*/
 374          #pragma disable
 375          
 376          unsigned char com_tbuflen (void)
 377          {
 378   1      return (t_in - t_out);
 379   1      }
 380          void clear_buffer()
 381          {
 382   1      t_in = 0;
 383   1      t_out = 0;
 384   1      
 385   1      r_in = 0;
 386   1      r_out = 0;
 387   1      RI = 0;             /* clear receiver interrupt */
 388   1      TI = 0;             /* clear transmit interrupt */
 389   1      }
 390            
 391          /*------------------------------------------------------------------------------
 392          Transmito un Buffer x y lo pasa a ascii Y LO ENVIO POR EL PTO SERIE
 393          io=0 datos enviados
 394          io=1 datos recibidos
 395          ------------------------------------------------------------------------------*/
 396          /*TEMPORALMENTE FUERA DE SERVICIO*/
 397          /*
 398          void DebugBuffer_Uart(unsigned char num_char)
 399          {
 400            unsigned char j;
 401            unsigned char d;
 402            
 403            
 404              
 405              
 406              printf("Datos Monitor respuesta:"); 
 407              
 408              for (j=0; j<num_char; j++)
 409              {
 410            //  Debug_chr_uart(Buffer_Tibbo_rx[j]);
 411              
 412              }
 413              d=putchar('\r');
 414              d=putchar('\n');
 415            
 416          
 417          }
 418          */
 419          /*------------------------------------------------------------------------------
 420          Transmito un caracter pasandolo a ascii 
 421          ------------------------------------------------------------------------------*/
 422          /* TEMPORALMENTE FUERA DE SERVICIO
 423          void Debug_chr_uart(unsigned char Dat)
 424          {
 425            unsigned char temp;
 426            unsigned char d;
C51 COMPILER V9.59.0.0   UART                                                              07/19/2021 16:32:04 PAGE 8   

 427              temp=(Dat&0xf0)>>4;
 428              (temp>0x09)?(temp=temp+0x37):(temp=temp+0x30);
 429            
 430              d=putchar(temp);  
 431            
 432                         
 433              temp=(Dat&0x0f);
 434              (temp>0x09)?(temp=temp+0x37):(temp=temp+0x30);
 435              d=putchar(temp);  
 436              d=putchar(' '); 
 437            
 438            
 439          }
 440          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    434    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
